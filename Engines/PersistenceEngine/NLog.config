<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log" >


  <!-- optional, add some variabeles
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <variable name="application" value="PersistenceEngine"/>

  <!-- 
  See https://github.com/nlog/nlog/wiki/Configuration-file 
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!-- 
    add your targets here 
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename. 
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->

    <target name="asyncDb" xsi:type="AsyncWrapper">
      <!-- Database target log -->
      <target name="db"
            xsi:type="Database"
            connectionStringName="CharonContext"
            commandType="StoredProcedure"
            commandText="[dbo].[NLog_AddEntry_p]"
        >
        <parameter name="@machineName"    layout="${machinename}" />
        <parameter name="@siteName"       layout="${iis-site-name}" />
        <parameter name="@logged"         layout="${date}" />
        <parameter name="@level"          layout="${level}" />
        <parameter name="@username"       layout="${aspnet-user-identity}" />
        <parameter name="@message"        layout="${message}" />
        <parameter name="@logger"         layout="${logger}" />
        <parameter name="@properties"     layout="${all-event-properties:separator=|}" />
        <parameter name="@serverName"     layout="${aspnet-request:serverVariable=SERVER_NAME}" />
        <parameter name="@port"           layout="${aspnet-request:serverVariable=SERVER_PORT}" />
        <parameter name="@url"            layout="${aspnet-request:serverVariable=HTTP_URL}" />
        <parameter name="@https"          layout="${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}" />
        <parameter name="@serverAddress"  layout="${aspnet-request:serverVariable=LOCAL_ADDR}" />
        <parameter name="@remoteAddress"  layout="${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}" />
        <parameter name="@callSite"       layout="${callsite}" />
        <parameter name="@exception"      layout="${exception:tostring}" />
      </target>

      <!--
      Notes:

      - Some of these layout renderers require a reference to NLog.Web. 
        (http://nuget.org/List/Packages/NLog.Web)

      - If the connection string was created with Visual Studio's Settings dialog
        then its name may be prefixed with a namespace like "<project>.Settings.Properties.*".
        If so be sure to include the entire name (with the namespace).
    -->
    </target>

    <!-- Outputdebugstring target log -->
    <target xsi:type="OutputDebugString" name="outputDebugString"
        layout="[${application}] ${date} ${level} ${message}"
        />

    <target xsi:type="Console"
        name="console"
        layout="[${application}] ${date} ${level} ${message}"
        error="false" />

    <target xsi:type="Debugger"
        name="debugger"
        layout="[${application}] ${date} ${level} ${message}"
         />

    <!-- Eventlog target log  - not used-->
    <!--<target xsi:type="EventLog"
            name="eventlog"
            source="PersistenceEngine"
            layout="${message}${newline}${exception:format=ToString}"/>-->

  </targets>

  <rules>
    <!-- add your logging rules here -->
    <logger name="*" minlevel="Error" writeTo="asyncDb" />
    <logger name="*" minlevel="Trace" writeTo="outputDebugString" />
    <logger name="*" minlevel="Info" writeTo="console" />
    <logger name="*" minlevel="Info" writeTo="debugger" />



    <!--<logger name="*" minlevel="Debug" writeTo="eventLog" />-->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  </rules>
</nlog>